// Local Multiplayer Fallback for Development
// –¶–µ–π —Ñ–∞–π–ª –∑–∞–±–µ–∑–ø–µ—á—É—î –ª–æ–∫–∞–ª—å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞ –±–µ–∑ GitHub API

class LocalMultiplayerFallback {
    constructor() {
        this.rooms = new Map();
        this.eventHandlers = new Map();
        this.playerId = 'local_' + Math.random().toString(36).substr(2, 9);
        this.playerName = '';
        this.currentRoom = null;
    }

    // –ü–æ–¥—ñ—î–≤–∞ —Å–∏—Å—Ç–µ–º–∞ (—Ç–∞–∫–∞ –∂ —è–∫ —É TelegramMultiplayerManager)
    on(event, handler) {
        if (!this.eventHandlers.has(event)) {
            this.eventHandlers.set(event, []);
        }
        this.eventHandlers.get(event).push(handler);
    }

    emit(event, data) {
        const handlers = this.eventHandlers.get(event) || [];
        handlers.forEach(handler => {
            try {
                handler(data);
            } catch (error) {
                console.error(`Error in event handler for ${event}:`, error);
            }
        });
    }

    async createRoom(settings = {}) {
        try {
            const roomCode = this.generateRoomCode();
            const roomData = {
                code: roomCode,
                host: {
                    id: this.playerId,
                    name: this.playerName
                },
                players: [{
                    id: this.playerId,
                    name: this.playerName,
                    joinedAt: Date.now()
                }],
                settings: {
                    category: settings.category || '–ó–º—ñ—à–∞–Ω–∏–π',
                    roundDuration: settings.roundDuration || 60,
                    maxPlayers: settings.maxPlayers || 2
                },
                gameState: {
                    status: 'waiting',
                    actions: [],
                    score: {}
                },
                createdAt: Date.now(),
                lastActivity: Date.now()
            };

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
            localStorage.setItem(`room_${roomCode}`, JSON.stringify(roomData));
            this.rooms.set(roomCode, roomData);
            this.currentRoom = roomCode;

            this.emit('roomCreated', {
                roomCode: roomCode,
                players: roomData.players
            });

            console.log(`üè† –õ–æ–∫–∞–ª—å–Ω–∞ –∫—ñ–º–Ω–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: ${roomCode}`);
            return { success: true, roomCode };

        } catch (error) {
            console.error('Error creating local room:', error);
            this.emit('error', { message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É (–ª–æ–∫–∞–ª—å–Ω–æ)' });
            return { success: false, error: error.message };
        }
    }

    async joinRoom(roomCode, playerName = null) {
        try {
            this.playerName = playerName || this.playerName;
            
            // –®—É–∫–∞—î–º–æ –∫—ñ–º–Ω–∞—Ç—É –≤ localStorage
            const roomDataStr = localStorage.getItem(`room_${roomCode}`);
            if (!roomDataStr) {
                throw new Error('–ö—ñ–º–Ω–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            const roomData = JSON.parse(roomDataStr);
            
            if (roomData.players.length >= roomData.settings.maxPlayers) {
                throw new Error('–ö—ñ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∞');
            }

            // –î–æ–¥–∞—î–º–æ –≥—Ä–∞–≤—Ü—è —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
            const playerExists = roomData.players.find(p => p.id === this.playerId);
            if (!playerExists) {
                roomData.players.push({
                    id: this.playerId,
                    name: this.playerName,
                    joinedAt: Date.now()
                });
            }

            roomData.lastActivity = Date.now();

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
            localStorage.setItem(`room_${roomCode}`, JSON.stringify(roomData));
            this.rooms.set(roomCode, roomData);
            this.currentRoom = roomCode;

            this.emit('roomJoined', {
                roomCode: roomCode,
                players: roomData.players
            });

            this.emit('playerJoined', {
                playerId: this.playerId,
                playerName: this.playerName,
                players: roomData.players
            });

            console.log(`üö™ –ü—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ—ó –∫—ñ–º–Ω–∞—Ç–∏: ${roomCode}`);
            return { success: true };

        } catch (error) {
            console.error('Error joining local room:', error);
            this.emit('error', { message: error.message });
            return { success: false, error: error.message };
        }
    }

    async sendGameAction(action, data = {}) {
        if (!this.currentRoom) {
            this.emit('error', { message: '–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –∫—ñ–º–Ω–∞—Ç–∏' });
            return;
        }

        try {
            const roomDataStr = localStorage.getItem(`room_${this.currentRoom}`);
            if (!roomDataStr) {
                throw new Error('–ö—ñ–º–Ω–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            const roomData = JSON.parse(roomDataStr);

            const actionData = {
                id: Date.now().toString(),
                playerId: this.playerId,
                playerName: this.playerName,
                action: action,
                data: data,
                timestamp: Date.now()
            };

            roomData.gameState.actions.push(actionData);
            roomData.lastActivity = Date.now();

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
            localStorage.setItem(`room_${this.currentRoom}`, JSON.stringify(roomData));
            this.rooms.set(this.currentRoom, roomData);

            this.emit('gameAction', actionData);

            console.log(`üéØ –õ–æ–∫–∞–ª—å–Ω–∞ –¥—ñ—è: ${action}`);

        } catch (error) {
            console.error('Error sending local game action:', error);
            this.emit('error', { message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥—ñ—é' });
        }
    }

    async leaveRoom() {
        if (!this.currentRoom) return;

        try {
            const roomDataStr = localStorage.getItem(`room_${this.currentRoom}`);
            if (roomDataStr) {
                const roomData = JSON.parse(roomDataStr);
                
                // –í–∏–¥–∞–ª—è—î–º–æ –≥—Ä–∞–≤—Ü—è
                roomData.players = roomData.players.filter(p => p.id !== this.playerId);
                
                if (roomData.players.length === 0) {
                    // –í–∏–¥–∞–ª—è—î–º–æ –ø—É—Å—Ç—É –∫—ñ–º–Ω–∞—Ç—É
                    localStorage.removeItem(`room_${this.currentRoom}`);
                    this.rooms.delete(this.currentRoom);
                } else {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–º–Ω–∞—Ç—É
                    localStorage.setItem(`room_${this.currentRoom}`, JSON.stringify(roomData));
                    this.rooms.set(this.currentRoom, roomData);
                }
            }

            this.currentRoom = null;
            this.emit('leftRoom', {});
            
            console.log('üö™ –ü–æ–∫–∏–Ω—É–≤ –ª–æ–∫–∞–ª—å–Ω—É –∫—ñ–º–Ω–∞—Ç—É');

        } catch (error) {
            console.error('Error leaving local room:', error);
        }
    }

    generateRoomCode() {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let result = '';
        for (let i = 0; i < 6; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    }

    getConnectionStatus() {
        return 'connected'; // –ó–∞–≤–∂–¥–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ
    }

    destroy() {
        if (this.currentRoom) {
            this.leaveRoom();
        }
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if (typeof window !== 'undefined') {
    window.LocalMultiplayerFallback = LocalMultiplayerFallback;
}
