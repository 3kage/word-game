// –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π Telegram Multiplayer Adapter
// –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –æ—Å–Ω–æ–≤–Ω–∏–º —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –≥—Ä–∏

class TelegramFreeMultiplayerAdapter {
    constructor() {
        this.multiplayerManager = null;
        this.gameManager = null;
        this.currentScreen = 'menu';
        this.eventHandlers = new Map();
        
        this.init();
    }

    async init() {
        try {
            console.log('üöÄ Initializing Telegram Free Multiplayer...');
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞
            this.multiplayerManager = new TelegramFreeMultiplayerManager();
            
            // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—ó
            this.setupEventHandlers();
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram
            this.checkTelegramEnvironment();
            
            console.log('‚úÖ Telegram Free Multiplayer ready!');
            
        } catch (error) {
            console.error('‚ùå Failed to initialize multiplayer:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞');
        }
    }

    setupEventHandlers() {
        // –ü–æ–¥—ñ—ó –≤—ñ–¥ –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        this.multiplayerManager.on('roomCreated', (data) => {
            this.onRoomCreated(data);
        });

        this.multiplayerManager.on('roomJoined', (data) => {
            this.onRoomJoined(data);
        });

        this.multiplayerManager.on('roomLeft', (data) => {
            this.onRoomLeft(data);
        });

        this.multiplayerManager.on('connected', (data) => {
            this.onConnected(data);
        });

        this.multiplayerManager.on('roomUpdated', (data) => {
            this.onRoomUpdated(data);
        });

        this.multiplayerManager.on('gameAction', (data) => {
            this.onGameAction(data);
        });

        this.multiplayerManager.on('heartbeat', (data) => {
            this.updateConnectionStatus();
        });
    }

    checkTelegramEnvironment() {
        if (window.Telegram?.WebApp) {
            console.log('üì± Running in Telegram WebApp');
            this.showTelegramInfo();
        } else {
            console.log('üåê Running in browser (demo mode)');
            this.showBrowserInfo();
        }
    }

    showTelegramInfo() {
        const infoDiv = document.getElementById('telegram-info');
        if (infoDiv) {
            infoDiv.innerHTML = `
                <div class="telegram-status">
                    <span class="status-icon">üì±</span>
                    <span>–ó–∞–ø—É—â–µ–Ω–æ –≤ Telegram</span>
                </div>
            `;
            infoDiv.style.display = 'block';
        }
    }

    showBrowserInfo() {
        const infoDiv = document.getElementById('telegram-info');
        if (infoDiv) {
            infoDiv.innerHTML = `
                <div class="telegram-status demo">
                    <span class="status-icon">üåê</span>
                    <span>–î–µ–º–æ-—Ä–µ–∂–∏–º (–≤—ñ–¥–∫—Ä–∏–π—Ç–µ –≤ Telegram –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É)</span>
                </div>
            `;
            infoDiv.style.display = 'block';
        }
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏
    async createRoom(gameConfig = {}) {
        try {
            console.log('üè† Creating multiplayer room...');
            
            this.showLoading('–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏...');
            
            const result = await this.multiplayerManager.createRoom(gameConfig);
            
            this.hideLoading();
            
            if (result.success) {
                console.log('‚úÖ Room created successfully:', result.roomId);
                this.showRoomCreated(result.roomId, result.roomData);
            } else {
                throw new Error(result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
            }
            
            return result;
            
        } catch (error) {
            console.error('‚ùå Failed to create room:', error);
            this.hideLoading();
            this.showError(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏: ${error.message}`);
            return { success: false, error: error.message };
        }
    }

    // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
    async joinRoom(roomId) {
        try {
            console.log('üö™ Joining room:', roomId);
            
            if (!roomId || roomId.trim() === '') {
                throw new Error('–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏');
            }
            
            this.showLoading('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏...');
            
            const result = await this.multiplayerManager.joinRoom(roomId.trim().toUpperCase());
            
            this.hideLoading();
            
            if (result.success) {
                console.log('‚úÖ Joined room successfully:', roomId);
                this.showRoomJoined(roomId, result.roomData);
            } else {
                throw new Error(result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
            }
            
            return result;
            
        } catch (error) {
            console.error('‚ùå Failed to join room:', error);
            this.hideLoading();
            this.showError(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${error.message}`);
            return { success: false, error: error.message };
        }
    }

    // –ü–æ–∫–∏–Ω—É—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É
    async leaveRoom() {
        try {
            await this.multiplayerManager.leaveRoom();
            this.showMultiplayerMenu();
        } catch (error) {
            console.error('‚ùå Failed to leave room:', error);
            this.showError(`–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É –∑ –∫—ñ–º–Ω–∞—Ç–∏: ${error.message}`);
        }
    }

    // –ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –¥–æ –≥—Ä–∏
    async setPlayerReady() {
        try {
            const result = await this.multiplayerManager.sendGameAction('playerReady', {
                ready: true
            });
            
            if (result.success) {
                this.updatePlayerReadyStatus();
            }
            
        } catch (error) {
            console.error('‚ùå Failed to set player ready:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ –≥—Ä–∏');
        }
    }

    // –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ª–æ–≤–æ
    async submitWord(word) {
        try {
            const result = await this.multiplayerManager.sendGameAction('wordSubmitted', {
                word: word,
                timestamp: Date.now()
            });
            
            return result.success;
            
        } catch (error) {
            console.error('‚ùå Failed to submit word:', error);
            return false;
        }
    }

    // –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π
    onRoomCreated(data) {
        console.log('üè† Room created:', data.roomId);
        this.currentScreen = 'room';
        this.updateUI();
    }

    onRoomJoined(data) {
        console.log('üö™ Room joined:', data.roomId);
        this.currentScreen = 'room';
        this.updateUI();
    }

    onRoomLeft(data) {
        console.log('üëã Left room:', data.roomId);
        this.currentScreen = 'menu';
        this.updateUI();
    }

    onConnected(data) {
        console.log('üîó Connected to room:', data.roomId);
        this.updateConnectionStatus();
    }

    onRoomUpdated(data) {
        console.log('üîÑ Room updated');
        this.updateRoomInfo(data);
    }

    onGameAction(data) {
        console.log('üéÆ Game action:', data.action);
        this.handleGameAction(data);
    }

    handleGameAction(data) {
        const { action, data: actionData, playerName } = data;
        
        switch (action) {
            case 'playerReady':
                this.showNotification(`‚úÖ ${playerName} –≥–æ—Ç–æ–≤–∏–π –¥–æ –≥—Ä–∏`);
                this.updatePlayersList();
                break;
                
            case 'wordSubmitted':
                this.showNotification(`üìù ${playerName} –Ω–∞–¥—ñ—Å–ª–∞–≤ —Å–ª–æ–≤–æ`);
                this.updateGameState();
                break;
                
            case 'gameStarted':
                this.showNotification('üéÆ –ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—è!');
                this.startGame();
                break;
                
            default:
                console.log('Unknown game action:', action);
        }
    }

    // UI –º–µ—Ç–æ–¥–∏
    showRoomCreated(roomId, roomData) {
        const container = document.getElementById('multiplayer-container');
        if (!container) return;

        container.innerHTML = `
            <div class="room-created">
                <h2>üè† –ö—ñ–º–Ω–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞!</h2>
                <div class="room-code">
                    <h3>–ö–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏:</h3>
                    <div class="code-display">${roomId}</div>
                    <button onclick="navigator.clipboard?.writeText('${roomId}')" class="copy-btn">
                        üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏
                    </button>
                </div>
                <div class="room-info">
                    <p><strong>üëë –•–æ—Å—Ç:</strong> ${roomData.hostName}</p>
                    <p><strong>üë• –ì—Ä–∞–≤—Ü—ñ:</strong> ${roomData.players.length}/4</p>
                </div>
                <div class="players-list" id="players-list">
                    ${this.renderPlayersList(roomData.players)}
                </div>
                <div class="room-actions">
                    <button onclick="telegramMultiplayer.setPlayerReady()" class="ready-btn">
                        ‚úÖ –ì–æ—Ç–æ–≤–∏–π –¥–æ –≥—Ä–∏
                    </button>
                    <button onclick="telegramMultiplayer.leaveRoom()" class="leave-btn">
                        üö™ –ü–æ–∫–∏–Ω—É—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É
                    </button>
                </div>
                <div class="share-info">
                    <p>üí° –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ–¥–æ–º <strong>${roomId}</strong> –∑ –¥—Ä—É–∑—è–º–∏</p>
                </div>
            </div>
        `;
    }

    showRoomJoined(roomId, roomData) {
        this.showRoomCreated(roomId, roomData); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–π —Å–∞–º–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    }

    renderPlayersList(players) {
        return players.map(player => `
            <div class="player-item ${player.ready ? 'ready' : ''}">
                <span class="player-name">${player.name}</span>
                <span class="player-status">${player.ready ? '‚úÖ' : '‚è≥'}</span>
            </div>
        `).join('');
    }

    updatePlayersList() {
        const room = this.multiplayerManager.getCurrentRoom();
        if (!room) return;

        const playersListEl = document.getElementById('players-list');
        if (playersListEl) {
            playersListEl.innerHTML = this.renderPlayersList(room.players);
        }
    }

    showMultiplayerMenu() {
        const container = document.getElementById('multiplayer-container');
        if (!container) return;

        container.innerHTML = `
            <div class="multiplayer-menu">
                <h2>üéÆ –ú—É–ª—å—Ç–∏–ø–ª–µ—î—Ä</h2>
                <div class="multiplayer-actions">
                    <button onclick="telegramMultiplayer.createRoom()" class="create-room-btn">
                        üè† –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É
                    </button>
                    <div class="join-room-section">
                        <input type="text" id="room-code-input" placeholder="–ö–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏" maxlength="6" 
                               style="text-transform: uppercase;">
                        <button onclick="telegramMultiplayer.joinRoomFromInput()" class="join-room-btn">
                            üö™ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è
                        </button>
                    </div>
                </div>
                <div id="telegram-info" class="telegram-info"></div>
            </div>
        `;

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ Telegram
        this.checkTelegramEnvironment();
    }

    async joinRoomFromInput() {
        const input = document.getElementById('room-code-input');
        if (input) {
            await this.joinRoom(input.value);
        }
    }

    showLoading(message) {
        const container = document.getElementById('multiplayer-container');
        if (!container) return;

        container.innerHTML = `
            <div class="loading">
                <div class="loading-spinner">‚è≥</div>
                <p>${message}</p>
            </div>
        `;
    }

    hideLoading() {
        // Loading –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    }

    showError(message) {
        const notification = document.createElement('div');
        notification.className = 'error-notification';
        notification.innerHTML = `
            <span class="error-icon">‚ùå</span>
            <span class="error-message">${message}</span>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

    showNotification(message) {
        const notification = document.createElement('div');
        notification.className = 'success-notification';
        notification.innerHTML = `
            <span class="success-message">${message}</span>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    updateConnectionStatus() {
        const statusEl = document.getElementById('connection-status');
        if (statusEl) {
            const isConnected = this.multiplayerManager.isConnected();
            statusEl.textContent = isConnected ? 'üü¢ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ' : 'üî¥ –ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ';
            statusEl.className = isConnected ? 'connected' : 'disconnected';
        }
    }

    updateRoomInfo(roomData) {
        this.updatePlayersList();
        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI...
    }

    updateUI() {
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        if (this.currentScreen === 'menu') {
            this.showMultiplayerMenu();
        }
    }

    updatePlayerReadyStatus() {
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—è
        this.updatePlayersList();
    }

    updateGameState() {
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∏
        console.log('üéÆ Game state updated');
    }

    startGame() {
        // –ó–∞–ø—É—Å–∫ –≥—Ä–∏
        console.log('üöÄ Starting multiplayer game');
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
    getCurrentRoom() {
        return this.multiplayerManager?.getCurrentRoom();
    }

    isConnected() {
        return this.multiplayerManager?.isConnected() || false;
    }

    // Cleanup
    destroy() {
        if (this.multiplayerManager) {
            this.multiplayerManager.destroy();
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
let telegramMultiplayer = null;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    telegramMultiplayer = new TelegramFreeMultiplayerAdapter();
    
    // –†–æ–±–∏–º–æ –¥–æ—Å—Ç—É–ø–Ω–∏–º –≥–ª–æ–±–∞–ª—å–Ω–æ
    if (typeof window !== 'undefined') {
        window.telegramMultiplayer = telegramMultiplayer;
    }
});

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—ñ–≤
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TelegramFreeMultiplayerAdapter;
}
