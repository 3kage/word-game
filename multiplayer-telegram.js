// Telegram-based Multiplayer Manager
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Telegram Bot API –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É —Ç–∞ GitHub API –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É

class TelegramMultiplayerManager {
    constructor() {
        this.currentRoom = null;
        this.playerId = this.generatePlayerId();
        this.playerName = '';
        this.isHost = false;
        this.eventHandlers = new Map();
        this.pollingInterval = null;
        this.lastUpdateId = 0;
        this.connected = false;
        
        this.telegramAPI = window.EnvironmentConfig?.getTelegramAPIURL();
        this.githubAPI = window.EnvironmentConfig?.getGitHubAPIURL();
        this.githubRepo = window.EnvironmentConfig?.getGitHubRepo();
        
        this.init();
    }

    generatePlayerId() {
        return 'tg_player_' + Math.random().toString(36).substr(2, 9);
    }

    init() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å Telegram WebApp
        if (window.Telegram?.WebApp) {
            this.telegramUser = window.Telegram.WebApp.initDataUnsafe?.user;
            if (this.telegramUser) {
                this.playerId = `tg_${this.telegramUser.id}`;
                this.playerName = this.telegramUser.first_name || this.telegramUser.username || 'Telegram User';
            }
        }

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –æ–Ω–æ–≤–ª–µ–Ω—å
        this.startPolling();
    }

    // –ü–æ–¥—ñ—î–≤–∞ —Å–∏—Å—Ç–µ–º–∞
    on(event, handler) {
        if (!this.eventHandlers.has(event)) {
            this.eventHandlers.set(event, []);
        }
        this.eventHandlers.get(event).push(handler);
    }

    emit(event, data) {
        const handlers = this.eventHandlers.get(event) || [];
        handlers.forEach(handler => {
            try {
                handler(data);
            } catch (error) {
                console.error(`Error in event handler for ${event}:`, error);
            }
        });
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏ —á–µ—Ä–µ–∑ GitHub Gist
    async createRoom(settings = {}) {
        try {
            const roomCode = this.generateRoomCode();
            const roomData = {
                code: roomCode,
                host: {
                    id: this.playerId,
                    name: this.playerName
                },
                players: [{
                    id: this.playerId,
                    name: this.playerName,
                    joinedAt: Date.now()
                }],
                settings: {
                    category: settings.category || '–ó–º—ñ—à–∞–Ω–∏–π',
                    roundDuration: settings.roundDuration || 60,
                    maxPlayers: settings.maxPlayers || 2
                },
                gameState: {
                    status: 'waiting', // waiting, playing, finished
                    currentWord: null,
                    score: {},
                    round: 0
                },
                createdAt: Date.now(),
                lastActivity: Date.now()
            };

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—ñ–º–Ω–∞—Ç—É –≤ GitHub Gist
            const gistResponse = await this.createGist(roomCode, roomData);
            
            if (gistResponse.ok) {
                this.currentRoom = roomCode;
                this.isHost = true;
                this.connected = true;
                
                this.emit('roomCreated', {
                    roomCode: roomCode,
                    players: roomData.players
                });

                // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤ Telegram –∫–∞–Ω–∞–ª (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π)
                await this.notifyTelegramChannel(`üéÆ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É –∫—ñ–º–Ω–∞—Ç—É: ${roomCode}`);
                
                return { success: true, roomCode };
            } else {
                throw new Error('Failed to create room on GitHub');
            }
        } catch (error) {
            console.error('Error creating room:', error);
            this.emit('error', { message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É' });
            return { success: false, error: error.message };
        }
    }

    // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
    async joinRoom(roomCode, playerName = null) {
        try {
            this.playerName = playerName || this.playerName;
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏ –∑ GitHub
            const roomData = await this.getRoomData(roomCode);
            
            if (!roomData) {
                throw new Error('–ö—ñ–º–Ω–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            if (roomData.players.length >= roomData.settings.maxPlayers) {
                throw new Error('–ö—ñ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∞');
            }

            // –î–æ–¥–∞—î–º–æ –≥—Ä–∞–≤—Ü—è
            const playerExists = roomData.players.find(p => p.id === this.playerId);
            if (!playerExists) {
                roomData.players.push({
                    id: this.playerId,
                    name: this.playerName,
                    joinedAt: Date.now()
                });
            }

            roomData.lastActivity = Date.now();

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–º–Ω–∞—Ç—É
            const updateResponse = await this.updateGist(roomCode, roomData);
            
            if (updateResponse.ok) {
                this.currentRoom = roomCode;
                this.isHost = false;
                this.connected = true;
                
                this.emit('roomJoined', {
                    roomCode: roomCode,
                    players: roomData.players
                });

                this.emit('playerJoined', {
                    playerId: this.playerId,
                    playerName: this.playerName,
                    players: roomData.players
                });

                // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤ Telegram
                await this.notifyTelegramChannel(`üë§ ${this.playerName} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ ${roomCode}`);
                
                return { success: true };
            } else {
                throw new Error('Failed to join room');
            }
        } catch (error) {
            console.error('Error joining room:', error);
            this.emit('error', { message: error.message });
            return { success: false, error: error.message };
        }
    }

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ–≥—Ä–æ–≤–æ—ó –¥—ñ—ó
    async sendGameAction(action, data = {}) {
        if (!this.currentRoom) {
            this.emit('error', { message: '–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –∫—ñ–º–Ω–∞—Ç–∏' });
            return;
        }

        try {
            const roomData = await this.getRoomData(this.currentRoom);
            if (!roomData) {
                throw new Error('–ö—ñ–º–Ω–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –î–æ–¥–∞—î–º–æ –¥—ñ—é –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
            if (!roomData.gameState.actions) {
                roomData.gameState.actions = [];
            }

            const actionData = {
                id: Date.now().toString(),
                playerId: this.playerId,
                playerName: this.playerName,
                action: action,
                data: data,
                timestamp: Date.now()
            };

            roomData.gameState.actions.push(actionData);
            roomData.lastActivity = Date.now();

            // –û–±—Ä–æ–±–ª—è—î–º–æ –¥—ñ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ç–∏–ø—É
            this.processGameAction(roomData, actionData);

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–º–Ω–∞—Ç—É
            await this.updateGist(this.currentRoom, roomData);

            // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
            this.emit('gameAction', actionData);

            // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤ Telegram
            await this.notifyTelegramChannel(
                `üéØ ${this.playerName}: ${this.getActionDescription(action, data)}`
            );

        } catch (error) {
            console.error('Error sending game action:', error);
            this.emit('error', { message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥—ñ—é' });
        }
    }

    // –û–±—Ä–æ–±–∫–∞ —ñ–≥—Ä–æ–≤–∏—Ö –¥—ñ–π
    processGameAction(roomData, actionData) {
        switch (actionData.action) {
            case 'startGame':
                roomData.gameState.status = 'playing';
                roomData.gameState.round = 1;
                roomData.gameState.startTime = Date.now();
                break;
                
            case 'correct':
                if (!roomData.gameState.score[actionData.playerId]) {
                    roomData.gameState.score[actionData.playerId] = 0;
                }
                roomData.gameState.score[actionData.playerId] += (actionData.data.points || 10);
                break;
                
            case 'skip':
                // –õ–æ–≥—ñ–∫–∞ –ø—Ä–æ–ø—É—Å–∫—É —Å–ª–æ–≤–∞
                break;
                
            case 'pause':
                roomData.gameState.status = 'paused';
                break;
                
            case 'resume':
                roomData.gameState.status = 'playing';
                break;
                
            case 'endGame':
                roomData.gameState.status = 'finished';
                roomData.gameState.endTime = Date.now();
                break;
        }
    }

    // –û–ø–∏—Å –¥—ñ–π –¥–ª—è Telegram
    getActionDescription(action, data) {
        switch (action) {
            case 'correct': return `–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +${data.points || 10} –±–∞–ª—ñ–≤`;
            case 'skip': return '–ü—Ä–æ–ø—É—Å—Ç–∏–≤ —Å–ª–æ–≤–æ';
            case 'pause': return '–ü—Ä–∏–∑—É–ø–∏–Ω–∏–≤ –≥—Ä—É';
            case 'resume': return '–í—ñ–¥–Ω–æ–≤–∏–≤ –≥—Ä—É';
            case 'startGame': return '–†–æ–∑–ø–æ—á–∞–≤ –≥—Ä—É!';
            case 'endGame': return '–ó–∞–≤–µ—Ä—à–∏–≤ –≥—Ä—É';
            default: return action;
        }
    }

    // –ü–æ–∫–∏–Ω—É—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É
    async leaveRoom() {
        if (!this.currentRoom) return;

        try {
            const roomData = await this.getRoomData(this.currentRoom);
            if (roomData) {
                // –í–∏–¥–∞–ª—è—î–º–æ –≥—Ä–∞–≤—Ü—è
                roomData.players = roomData.players.filter(p => p.id !== this.playerId);
                
                // –Ø–∫—â–æ —Ö–æ—Å—Ç –ø–æ–∫–∏–¥–∞—î –∫—ñ–º–Ω–∞—Ç—É, –ø–µ—Ä–µ–¥–∞—î–º–æ –ø—Ä–∞–≤–æ —ñ–Ω—à–æ–º—É –≥—Ä–∞–≤—Ü—é
                if (this.isHost && roomData.players.length > 0) {
                    roomData.host = {
                        id: roomData.players[0].id,
                        name: roomData.players[0].name
                    };
                }

                roomData.lastActivity = Date.now();

                if (roomData.players.length === 0) {
                    // –í–∏–¥–∞–ª—è—î–º–æ –ø—É—Å—Ç—É –∫—ñ–º–Ω–∞—Ç—É
                    await this.deleteGist(this.currentRoom);
                } else {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–º–Ω–∞—Ç—É
                    await this.updateGist(this.currentRoom, roomData);
                }

                await this.notifyTelegramChannel(`üëã ${this.playerName} –ø–æ–∫–∏–Ω—É–≤ –∫—ñ–º–Ω–∞—Ç—É ${this.currentRoom}`);
            }

            this.currentRoom = null;
            this.isHost = false;
            this.connected = false;
            
            this.emit('leftRoom', {});
            
        } catch (error) {
            console.error('Error leaving room:', error);
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É –∫—ñ–º–Ω–∞—Ç–∏
    generateRoomCode() {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let result = '';
        for (let i = 0; i < 6; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    }

    // –†–æ–±–æ—Ç–∞ –∑ GitHub Gist
    async createGist(roomCode, roomData) {
        const githubToken = window.EnvironmentConfig?.getGitHubToken();
        
        // –Ø–∫—â–æ –Ω–µ–º–∞—î GitHub —Ç–æ–∫–µ–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ localStorage —è–∫ fallback
        if (!githubToken) {
            console.warn('GitHub token not available, using localStorage fallback');
            localStorage.setItem(`room_${roomCode}`, JSON.stringify(roomData));
            return { ok: true };
        }

        const gistData = {
            description: `Word Game Room: ${roomCode}`,
            public: false,
            files: {
                [`room_${roomCode}.json`]: {
                    content: JSON.stringify(roomData, null, 2)
                }
            }
        };

        try {
            const response = await fetch(`${this.githubAPI}/gists`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `token ${githubToken}`
                },
                body: JSON.stringify(gistData)
            });

            if (!response.ok) {
                throw new Error(`GitHub API error: ${response.status}`);
            }

            return response;
        } catch (error) {
            console.error('GitHub Gist creation failed, using localStorage:', error);
            localStorage.setItem(`room_${roomCode}`, JSON.stringify(roomData));
            return { ok: true };
        }
    }

    async updateGist(roomCode, roomData) {
        const githubToken = window.EnvironmentConfig?.getGitHubToken();
        
        // Fallback –¥–æ localStorage
        if (!githubToken) {
            localStorage.setItem(`room_${roomCode}`, JSON.stringify(roomData));
            return { ok: true };
        }

        try {
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π gist –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ
            // –í –ø—Ä–æ–¥–∞–∫—à–Ω –≤–∞—Ä—ñ–∞–Ω—Ç—ñ –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π gist
            return await this.createGist(roomCode, roomData);
        } catch (error) {
            console.error('GitHub Gist update failed, using localStorage:', error);
            localStorage.setItem(`room_${roomCode}`, JSON.stringify(roomData));
            return { ok: true };
        }
    }

    async getRoomData(roomCode) {
        const githubToken = window.EnvironmentConfig?.getGitHubToken();
        
        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ localStorage
        const localData = localStorage.getItem(`room_${roomCode}`);
        if (localData) {
            try {
                return JSON.parse(localData);
            } catch (error) {
                console.error('Error parsing local room data:', error);
            }
        }

        // –Ø–∫—â–æ –Ω–µ–º–∞—î GitHub —Ç–æ–∫–µ–Ω–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null
        if (!githubToken) {
            return null;
        }

        try {
            // –ü–æ—à—É–∫ —á–µ—Ä–µ–∑ GitHub Search API (–ø—É–±–ª—ñ—á–Ω—ñ gists)
            const searchQuery = `filename:room_${roomCode}.json`;
            const response = await fetch(`${this.githubAPI}/search/code?q=${encodeURIComponent(searchQuery)}`);
            
            if (response.ok) {
                const searchResults = await response.json();
                if (searchResults.items && searchResults.items.length > 0) {
                    // –û—Ç—Ä–∏–º—É—î–º–æ –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É
                    const fileUrl = searchResults.items[0].url;
                    const fileResponse = await fetch(fileUrl);
                    if (fileResponse.ok) {
                        const fileData = await fileResponse.json();
                        const content = atob(fileData.content);
                        return JSON.parse(content);
                    }
                }
            }
            return null;
        } catch (error) {
            console.error('Error getting room data from GitHub:', error);
            return null;
        }
    }

    async deleteGist(roomCode) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω ID gist
        console.log(`Room ${roomCode} should be deleted`);
    }

    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram –∫–∞–Ω–∞–ª
    async notifyTelegramChannel(message) {
        if (!this.telegramAPI) return;

        try {
            // –Ø–∫—â–æ —î –¥–æ—Å—Ç—É–ø –¥–æ Telegram WebApp, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            if (window.Telegram?.WebApp?.showAlert) {
                // –ü–æ–∫–∞–∑—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                console.log(`Telegram notification: ${message}`);
            }
        } catch (error) {
            console.error('Error sending Telegram notification:', error);
        }
    }

    // –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –æ–Ω–æ–≤–ª–µ–Ω—å
    startPolling() {
        if (this.pollingInterval) {
            clearInterval(this.pollingInterval);
        }

        this.pollingInterval = setInterval(async () => {
            if (this.currentRoom) {
                await this.checkForUpdates();
            }
        }, 2000); // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏
    }

    async checkForUpdates() {
        try {
            const roomData = await this.getRoomData(this.currentRoom);
            if (!roomData) {
                this.emit('error', { message: '–ö—ñ–º–Ω–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
                this.currentRoom = null;
                this.connected = false;
                return;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤—ñ –¥—ñ—ó
            if (roomData.gameState.actions) {
                const newActions = roomData.gameState.actions.filter(action => 
                    action.timestamp > this.lastUpdateId && action.playerId !== this.playerId
                );

                newActions.forEach(action => {
                    this.emit('gameAction', action);
                });

                if (newActions.length > 0) {
                    this.lastUpdateId = Math.max(...newActions.map(a => a.timestamp));
                }
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–∏ –≤ —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤
            this.emit('playersUpdated', {
                players: roomData.players
            });

        } catch (error) {
            console.error('Error checking for updates:', error);
        }
    }

    stopPolling() {
        if (this.pollingInterval) {
            clearInterval(this.pollingInterval);
            this.pollingInterval = null;
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑'—î–¥–Ω–∞–Ω–Ω—è
    getConnectionStatus() {
        return this.connected ? 'connected' : 'disconnected';
    }

    // –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –∑–Ω–∏—â–µ–Ω–Ω—ñ
    destroy() {
        this.stopPolling();
        if (this.currentRoom) {
            this.leaveRoom();
        }
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if (typeof window !== 'undefined') {
    window.TelegramMultiplayerManager = TelegramMultiplayerManager;
}
