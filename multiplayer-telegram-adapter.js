// Telegram Multiplayer Adapter for Word Game
class TelegramMultiplayerAdapter {
    constructor(wordGame) {
        this.game = wordGame;
        this.telegramMP = null;
        this.isMultiplayerMode = false;
        this.currentRoom = null;
        
        this.init();
    }

    async init() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∂–∏–º –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞
        const multiplayerMode = window.EnvironmentConfig?.getMultiplayerMode() || 'websocket';
        
        if (multiplayerMode === 'telegram' && window.TelegramMultiplayerManager) {
            console.log('üì± –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞...');
            this.telegramMP = new window.TelegramMultiplayerManager();
            this.setupTelegramEventListeners();
            this.setupTelegramUI();
            console.log('‚úÖ Telegram –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä –≥–æ—Ç–æ–≤–∏–π');
        } else {
            console.log('üåê –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è WebSocket –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä');
        }
    }

    setupTelegramEventListeners() {
        if (!this.telegramMP) return;

        // Room events
        this.telegramMP.on('roomCreated', (data) => this.onRoomCreated(data));
        this.telegramMP.on('roomJoined', (data) => this.onRoomJoined(data));
        this.telegramMP.on('playerJoined', (data) => this.onPlayerJoined(data));
        this.telegramMP.on('playerLeft', (data) => this.onPlayerLeft(data));
        this.telegramMP.on('leftRoom', (data) => this.onLeftRoom(data));

        // Game events
        this.telegramMP.on('gameStarted', (data) => this.onGameStarted(data));
        this.telegramMP.on('gameAction', (data) => this.onGameAction(data));
        this.telegramMP.on('playersUpdated', (data) => this.onPlayersUpdated(data));
        
        // Connection events
        this.telegramMP.on('error', (data) => this.onError(data));
    }

    setupTelegramUI() {
        // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        this.addMultiplayerButton();
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ UI –¥–ª—è Telegram –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞
        this.createTelegramMultiplayerScreens();
    }

    addMultiplayerButton() {
        const menu = document.getElementById('main-menu') || document.querySelector('.menu-buttons');
        if (!menu) return;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–Ω–æ–ø–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î
        if (document.getElementById('telegram-multiplayer-btn')) return;

        const multiplayerBtn = document.createElement('button');
        multiplayerBtn.id = 'telegram-multiplayer-btn';
        multiplayerBtn.className = 'menu-btn';
        multiplayerBtn.innerHTML = `
            <span class="btn-icon">üì±</span>
            <span class="btn-text">–ú—É–ª—å—Ç–∏–ø–ª–µ—î—Ä</span>
            <span class="btn-subtitle">–ì—Ä–∞—Ç–∏ –∑ –¥—Ä—É–∑—è–º–∏</span>
        `;
        multiplayerBtn.onclick = () => this.showTelegramMultiplayerMenu();

        // –í—Å—Ç–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ—Å–ª—è –∫–Ω–æ–ø–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ—ó –≥—Ä–∏
        const singlePlayerBtn = document.querySelector('.menu-btn');
        if (singlePlayerBtn && singlePlayerBtn.nextSibling) {
            menu.insertBefore(multiplayerBtn, singlePlayerBtn.nextSibling);
        } else {
            menu.appendChild(multiplayerBtn);
        }
    }

    createTelegramMultiplayerScreens() {
        const container = document.body;

        // –ú–µ–Ω—é –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞
        const multiplayerMenu = document.createElement('div');
        multiplayerMenu.id = 'telegram-multiplayer-menu';
        multiplayerMenu.className = 'screen hidden';
        multiplayerMenu.innerHTML = `
            <div class="card">
                <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">
                    üì± Telegram –ú—É–ª—å—Ç–∏–ø–ª–µ—î—Ä
                </h2>
                
                <div class="space-y-4">
                    <button id="tg-create-room-btn" class="menu-btn w-full">
                        <span class="btn-icon">üè†</span>
                        <span class="btn-text">–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É</span>
                        <span class="btn-subtitle">–ü–æ—á–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É</span>
                    </button>
                    
                    <button id="tg-join-room-btn" class="menu-btn w-full">
                        <span class="btn-icon">üö™</span>
                        <span class="btn-text">–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è</span>
                        <span class="btn-subtitle">–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏</span>
                    </button>
                    
                    <div class="telegram-info p-4 bg-blue-50 rounded-lg border border-blue-200">
                        <h3 class="font-semibold text-blue-800 mb-2">‚ÑπÔ∏è –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:</h3>
                        <ul class="text-sm text-blue-700 space-y-1">
                            <li>‚Ä¢ –ì—Ä–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î GitHub –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫—ñ–º–Ω–∞—Ç</li>
                            <li>‚Ä¢ Telegram –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—ó</li>
                            <li>‚Ä¢ –ñ–æ–¥–Ω–∏—Ö —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö —Å–µ—Ä–≤–µ—Ä—ñ–≤ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ</li>
                            <li>‚Ä¢ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ —Ç–∞ –±–µ–∑–ø–µ—á–Ω–æ</li>
                        </ul>
                    </div>
                </div>
                
                <button class="back-btn" onclick="window.telegramMultiplayerAdapter?.showMainMenu()">
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
            </div>
        `;
        container.appendChild(multiplayerMenu);

        // –ï–∫—Ä–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏
        const createRoomScreen = document.createElement('div');
        createRoomScreen.id = 'tg-create-room-screen';
        createRoomScreen.className = 'screen hidden';
        createRoomScreen.innerHTML = `
            <div class="card">
                <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">
                    üè† –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É
                </h2>
                
                <div class="form-group">
                    <label for="tg-player-name" class="form-label">–í–∞—à–µ —ñ–º'—è:</label>
                    <input type="text" id="tg-player-name" class="form-input" 
                           placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è" maxlength="20">
                </div>
                
                <div class="form-group">
                    <label for="tg-room-category" class="form-label">–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</label>
                    <select id="tg-room-category" class="form-input">
                        <option value="–ó–º—ñ—à–∞–Ω–∏–π">–ó–º—ñ—à–∞–Ω–∏–π</option>
                        <option value="–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó">–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó</option>
                        <option value="–ü—Ä–∏—Ä–æ–¥–∞">–ü—Ä–∏—Ä–æ–¥–∞</option>
                        <option value="–á–∂–∞">–á–∂–∞</option>
                        <option value="–°–ø–æ—Ä—Ç">–°–ø–æ—Ä—Ç</option>
                        <option value="–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ">–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="tg-round-duration" class="form-label">–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–∞—É–Ω–¥—É:</label>
                    <select id="tg-round-duration" class="form-input">
                        <option value="30">30 —Å–µ–∫—É–Ω–¥</option>
                        <option value="60" selected>60 —Å–µ–∫—É–Ω–¥</option>
                        <option value="90">90 —Å–µ–∫—É–Ω–¥</option>
                        <option value="120">2 —Ö–≤–∏–ª–∏–Ω–∏</option>
                    </select>
                </div>
                
                <button id="tg-create-room-confirm" class="btn-primary w-full">
                    –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É
                </button>
                
                <div id="tg-room-created" class="hidden mt-4 p-4 bg-green-50 rounded-lg border border-green-200">
                    <h3 class="font-semibold text-green-800 mb-2">‚úÖ –ö—ñ–º–Ω–∞—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–æ!</h3>
                    <div class="text-lg font-mono text-center p-3 bg-white rounded border">
                        –ö–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏: <span id="tg-room-code" class="font-bold text-2xl"></span>
                    </div>
                    <p class="text-sm text-green-700 mt-2 text-center">
                        –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Ü–∏–º –∫–æ–¥–æ–º –∑ –¥—Ä—É–∑—è–º–∏
                    </p>
                    <div class="mt-4 flex gap-2">
                        <button id="tg-copy-room-code" class="btn-secondary flex-1">
                            üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–¥
                        </button>
                        <button id="tg-share-room-code" class="btn-secondary flex-1">
                            üì§ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è
                        </button>
                    </div>
                    <div id="tg-room-players" class="mt-4">
                        <h4 class="font-semibold">–ì—Ä–∞–≤—Ü—ñ –≤ –∫—ñ–º–Ω–∞—Ç—ñ:</h4>
                        <div id="tg-players-list" class="mt-2"></div>
                    </div>
                    <button id="tg-start-game" class="btn-primary w-full mt-4 hidden">
                        üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É
                    </button>
                </div>
                
                <button class="back-btn" onclick="window.telegramMultiplayerAdapter?.showTelegramMultiplayerMenu()">
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
            </div>
        `;
        container.appendChild(createRoomScreen);

        // –ï–∫—Ä–∞–Ω –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
        const joinRoomScreen = document.createElement('div');
        joinRoomScreen.id = 'tg-join-room-screen';
        joinRoomScreen.className = 'screen hidden';
        joinRoomScreen.innerHTML = `
            <div class="card">
                <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">
                    üö™ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
                </h2>
                
                <div class="form-group">
                    <label for="tg-join-player-name" class="form-label">–í–∞—à–µ —ñ–º'—è:</label>
                    <input type="text" id="tg-join-player-name" class="form-input" 
                           placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è" maxlength="20">
                </div>
                
                <div class="form-group">
                    <label for="tg-join-room-code" class="form-label">–ö–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏:</label>
                    <input type="text" id="tg-join-room-code" class="form-input" 
                           placeholder="–í–≤–µ–¥—ñ—Ç—å 6-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥" maxlength="6" 
                           style="text-transform: uppercase; font-family: monospace;">
                </div>
                
                <button id="tg-join-room-confirm" class="btn-primary w-full">
                    –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è
                </button>
                
                <div id="tg-join-success" class="hidden mt-4 p-4 bg-green-50 rounded-lg border border-green-200">
                    <h3 class="font-semibold text-green-800 mb-2">‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—å!</h3>
                    <div id="tg-join-room-info"></div>
                    <div id="tg-join-players-list" class="mt-2"></div>
                    <p class="text-sm text-green-700 mt-2">
                        –û—á—ñ–∫—É—î–º–æ –ø–æ–∫–∏ —Ö–æ—Å—Ç –ø–æ—á–Ω–µ –≥—Ä—É...
                    </p>
                </div>
                
                <button class="back-btn" onclick="window.telegramMultiplayerAdapter?.showTelegramMultiplayerMenu()">
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
            </div>
        `;
        container.appendChild(joinRoomScreen);

        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        this.setupTelegramEventHandlers();
    }

    setupTelegramEventHandlers() {
        // –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        document.getElementById('tg-create-room-btn')?.addEventListener('click', 
            () => this.showCreateRoomScreen());
        document.getElementById('tg-join-room-btn')?.addEventListener('click', 
            () => this.showJoinRoomScreen());

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏
        document.getElementById('tg-create-room-confirm')?.addEventListener('click', 
            () => this.createRoom());
        document.getElementById('tg-copy-room-code')?.addEventListener('click', 
            () => this.copyRoomCode());
        document.getElementById('tg-share-room-code')?.addEventListener('click', 
            () => this.shareRoomCode());
        document.getElementById('tg-start-game')?.addEventListener('click', 
            () => this.startGame());

        // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
        document.getElementById('tg-join-room-confirm')?.addEventListener('click', 
            () => this.joinRoom());

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É –∫—ñ–º–Ω–∞—Ç–∏
        document.getElementById('tg-join-room-code')?.addEventListener('input', (e) => {
            e.target.value = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
        });

        // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∑ Telegram
        this.fillTelegramUserInfo();
    }

    fillTelegramUserInfo() {
        if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
            const user = window.Telegram.WebApp.initDataUnsafe.user;
            const name = user.first_name || user.username || 'Telegram User';
            
            document.getElementById('tg-player-name').value = name;
            document.getElementById('tg-join-player-name').value = name;
        }
    }

    // Navigation methods
    showMainMenu() {
        this.hideAllScreens();
        document.getElementById('main-menu')?.classList.remove('hidden');
    }

    showTelegramMultiplayerMenu() {
        this.hideAllScreens();
        document.getElementById('telegram-multiplayer-menu')?.classList.remove('hidden');
    }

    showCreateRoomScreen() {
        this.hideAllScreens();
        document.getElementById('tg-create-room-screen')?.classList.remove('hidden');
    }

    showJoinRoomScreen() {
        this.hideAllScreens();
        document.getElementById('tg-join-room-screen')?.classList.remove('hidden');
    }

    hideAllScreens() {
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.add('hidden');
        });
    }

    // Room management
    async createRoom() {
        const playerName = document.getElementById('tg-player-name')?.value.trim();
        const category = document.getElementById('tg-room-category')?.value;
        const roundDuration = parseInt(document.getElementById('tg-round-duration')?.value);

        if (!playerName) {
            alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è');
            return;
        }

        if (!this.telegramMP) {
            alert('Telegram –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return;
        }

        const result = await this.telegramMP.createRoom({
            category: category,
            roundDuration: roundDuration,
            maxPlayers: 2
        });

        if (result.success) {
            this.currentRoom = result.roomCode;
            this.isMultiplayerMode = true;
            
            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω—É –∫—ñ–º–Ω–∞—Ç—É
            document.getElementById('tg-room-code').textContent = result.roomCode;
            document.getElementById('tg-room-created')?.classList.remove('hidden');
            
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Ñ–æ—Ä–º—É
            document.getElementById('tg-create-room-confirm').style.display = 'none';
        }
    }

    async joinRoom() {
        const playerName = document.getElementById('tg-join-player-name')?.value.trim();
        const roomCode = document.getElementById('tg-join-room-code')?.value.trim();

        if (!playerName) {
            alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è');
            return;
        }

        if (!roomCode || roomCode.length !== 6) {
            alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏ (6 —Å–∏–º–≤–æ–ª—ñ–≤)');
            return;
        }

        if (!this.telegramMP) {
            alert('Telegram –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return;
        }

        const result = await this.telegramMP.joinRoom(roomCode, playerName);

        if (result.success) {
            this.currentRoom = roomCode;
            this.isMultiplayerMode = true;
            
            // –ü–æ–∫–∞–∑—É—î–º–æ —É—Å–ø—ñ—à–Ω–µ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è
            document.getElementById('tg-join-success')?.classList.remove('hidden');
            
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Ñ–æ—Ä–º—É
            document.getElementById('tg-join-room-confirm').style.display = 'none';
        }
    }

    async startGame() {
        if (!this.telegramMP || !this.currentRoom) return;

        await this.telegramMP.sendGameAction('startGame');
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –≥—Ä—É
        this.startMultiplayerGame();
    }

    startMultiplayerGame() {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –µ–∫—Ä–∞–Ω—É
        this.hideAllScreens();
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É –∑ –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä —Ä–µ–∂–∏–º–æ–º
        if (this.game && this.game.startGame) {
            this.game.isMultiplayerMode = true;
            this.game.multiplayerManager = this.telegramMP;
            this.game.startGame();
        }
    }

    // Utility methods
    copyRoomCode() {
        const roomCode = document.getElementById('tg-room-code')?.textContent;
        if (roomCode && navigator.clipboard) {
            navigator.clipboard.writeText(roomCode).then(() => {
                // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                this.showNotification('–ö–æ–¥ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!');
            });
        }
    }

    shareRoomCode() {
        const roomCode = document.getElementById('tg-room-code')?.textContent;
        if (roomCode && window.Telegram?.WebApp) {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Telegram WebApp API –¥–ª—è –ø–æ–¥—ñ–ª–µ–Ω–Ω—è
            const shareText = `üéÆ –ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ –≥—Ä–∏ –≤ —Å–ª–æ–≤–∞!\n–ö–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏: ${roomCode}\n\n–ü–µ—Ä–µ—Ö–æ–¥—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: ${window.location.href}`;
            
            if (navigator.share) {
                navigator.share({
                    title: '–ì—Ä–∞ –≤ —Å–ª–æ–≤–∞',
                    text: shareText,
                    url: window.location.href
                });
            } else {
                // Fallback - –∫–æ–ø—ñ—é—î–º–æ —Ç–µ–∫—Å—Ç
                navigator.clipboard?.writeText(shareText);
                this.showNotification('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!');
            }
        }
    }

    showNotification(message) {
        // –ü—Ä–æ—Å—Ç–∏–π —Å–ø–æ—Å—ñ–± –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        if (window.Telegram?.WebApp?.showAlert) {
            window.Telegram.WebApp.showAlert(message);
        } else {
            // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            const notification = document.createElement('div');
            notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50';
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
    }

    updatePlayersList(players, containerId) {
        const container = document.getElementById(containerId);
        if (!container || !players) return;

        container.innerHTML = players.map(player => `
            <div class="player-item flex items-center space-x-2 p-2 bg-white rounded border">
                <span class="text-green-600">üë§</span>
                <span class="font-medium">${player.name}</span>
                ${player.id === this.telegramMP?.playerId ? '<span class="text-xs text-gray-500">(–≤–∏)</span>' : ''}
            </div>
        `).join('');
    }

    // Event handlers
    onRoomCreated(data) {
        console.log('üè† –ö—ñ–º–Ω–∞—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–æ:', data);
        this.updatePlayersList(data.players, 'tg-players-list');
    }

    onRoomJoined(data) {
        console.log('üö™ –ü—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏:', data);
    }

    onPlayerJoined(data) {
        console.log('üë§ –ì—Ä–∞–≤–µ—Ü—å –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è:', data);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤
        this.updatePlayersList(data.players, 'tg-players-list');
        this.updatePlayersList(data.players, 'tg-join-players-list');
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç—É —è–∫—â–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–∞–≤—Ü—ñ–≤
        if (data.players && data.players.length >= 2) {
            document.getElementById('tg-start-game')?.classList.remove('hidden');
        }
        
        this.showNotification(`${data.playerName} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏!`);
    }

    onPlayerLeft(data) {
        console.log('üëã –ì—Ä–∞–≤–µ—Ü—å –ø–æ–∫–∏–Ω—É–≤ –∫—ñ–º–Ω–∞—Ç—É:', data);
        this.showNotification(`${data.playerName} –ø–æ–∫–∏–Ω—É–≤ –≥—Ä—É`);
    }

    onLeftRoom(data) {
        console.log('üö™ –ü–æ–∫–∏–Ω—É–ª–∏ –∫—ñ–º–Ω–∞—Ç—É');
        this.currentRoom = null;
        this.isMultiplayerMode = false;
        this.showMainMenu();
    }

    onGameStarted(data) {
        console.log('üéÆ –ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—è!', data);
        this.startMultiplayerGame();
    }

    onGameAction(data) {
        console.log('üéØ –Ü–≥—Ä–æ–≤–∞ –¥—ñ—è:', data);
        
        // –ü–µ—Ä–µ–¥–∞—î–º–æ –¥—ñ—é –¥–æ –æ—Å–Ω–æ–≤–Ω–æ—ó –≥—Ä–∏
        if (this.game && this.game.handleMultiplayerAction) {
            this.game.handleMultiplayerAction(data);
        }
        
        // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥—ñ—é —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
        if (data.playerId !== this.telegramMP?.playerId) {
            const actionText = this.getActionDescription(data.action, data.data);
            this.showNotification(`${data.playerName}: ${actionText}`);
        }
    }

    onPlayersUpdated(data) {
        console.log('üë• –°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ:', data);
        this.updatePlayersList(data.players, 'tg-players-list');
        this.updatePlayersList(data.players, 'tg-join-players-list');
    }

    onError(data) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–µ—î—Ä–∞:', data);
        alert(`–ü–æ–º–∏–ª–∫–∞: ${data.message}`);
    }

    getActionDescription(action, data) {
        switch (action) {
            case 'correct': return `–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +${data?.points || 10} –±–∞–ª—ñ–≤`;
            case 'skip': return '–ü—Ä–æ–ø—É—Å—Ç–∏–≤ —Å–ª–æ–≤–æ';
            case 'pause': return '–ü—Ä–∏–∑—É–ø–∏–Ω–∏–≤ –≥—Ä—É';
            case 'resume': return '–í—ñ–¥–Ω–æ–≤–∏–≤ –≥—Ä—É';
            case 'startGame': return '–†–æ–∑–ø–æ—á–∞–≤ –≥—Ä—É!';
            case 'endGame': return '–ó–∞–≤–µ—Ä—à–∏–≤ –≥—Ä—É';
            default: return action;
        }
    }

    // Public methods for game integration
    sendGameAction(action, data = {}) {
        if (this.telegramMP && this.isMultiplayerMode) {
            this.telegramMP.sendGameAction(action, data);
        }
    }

    leaveRoom() {
        if (this.telegramMP && this.currentRoom) {
            this.telegramMP.leaveRoom();
        }
    }

    // Cleanup
    destroy() {
        if (this.telegramMP) {
            this.telegramMP.destroy();
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
window.addEventListener('DOMContentLoaded', () => {
    // –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –æ—Å–Ω–æ–≤–Ω–∞ –≥—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è
    const initAdapter = () => {
        if (window.wordGame && window.EnvironmentConfig) {
            window.telegramMultiplayerAdapter = new TelegramMultiplayerAdapter(window.wordGame);
        } else {
            setTimeout(initAdapter, 100);
        }
    };
    initAdapter();
});

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TelegramMultiplayerAdapter;
}
