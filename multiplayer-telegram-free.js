// –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π Telegram Multiplayer Manager
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç—ñ–ª—å–∫–∏ Telegram Bot API –±–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤

class TelegramFreeMultiplayerManager {
    constructor() {
        this.currentRoom = null;
        this.playerId = this.generatePlayerId();
        this.playerName = '';
        this.isHost = false;
        this.eventHandlers = new Map();
        this.pollingInterval = null;
        this.lastUpdateId = 0;
        this.connected = false;
        this.botToken = null;
        this.chatId = null;
        
        this.init();
    }

    generatePlayerId() {
        return 'player_' + Math.random().toString(36).substr(2, 9);
    }

    init() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å Telegram WebApp
        if (window.Telegram?.WebApp) {
            this.telegramUser = window.Telegram.WebApp.initDataUnsafe?.user;
            if (this.telegramUser) {
                this.playerId = `${this.telegramUser.id}`;
                this.playerName = this.telegramUser.first_name || this.telegramUser.username || '–ì—Ä–∞–≤–µ—Ü—å';
                this.chatId = this.telegramUser.id;
            }
            
            // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∞–±–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            this.botToken = this.getBotToken();
        }

        console.log('üéÆ Telegram Free Multiplayer initialized:', {
            playerId: this.playerId,
            playerName: this.playerName,
            hasTelegram: !!window.Telegram?.WebApp
        });
    }

    getBotToken() {
        // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
        if (window.EnvironmentConfig?.getTelegramBotToken()) {
            return window.EnvironmentConfig.getTelegramBotToken();
        }
        
        // Fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –¥–µ–º–æ
        return '5775769170:LIVE:TG_1oguWlYT13ms_s3AuCVLtWgA';
    }

    // –ü–æ–¥—ñ—î–≤–∞ —Å–∏—Å—Ç–µ–º–∞
    on(event, handler) {
        if (!this.eventHandlers.has(event)) {
            this.eventHandlers.set(event, []);
        }
        this.eventHandlers.get(event).push(handler);
    }

    emit(event, data) {
        const handlers = this.eventHandlers.get(event) || [];
        handlers.forEach(handler => {
            try {
                handler(data);
            } catch (error) {
                console.error('Event handler error:', error);
            }
        });
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏
    async createRoom(gameConfig = {}) {
        try {
            console.log('üè† Creating room...');
            
            // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –∫—ñ–º–Ω–∞—Ç–∏
            const roomId = this.generateRoomId();
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫—ñ–º–Ω–∞—Ç—É –ª–æ–∫–∞–ª—å–Ω–æ
            const roomData = {
                id: roomId,
                hostId: this.playerId,
                hostName: this.playerName,
                players: [{
                    id: this.playerId,
                    name: this.playerName,
                    ready: false
                }],
                gameConfig: {
                    timeLimit: 60,
                    difficulty: 'medium',
                    rounds: 3,
                    ...gameConfig
                },
                gameState: {
                    status: 'waiting', // waiting, playing, finished
                    currentRound: 0,
                    currentPlayer: null,
                    words: [],
                    scores: {}
                },
                createdAt: Date.now(),
                lastActivity: Date.now()
            };

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
            this.saveRoomToStorage(roomData);
            
            this.currentRoom = roomData;
            this.isHost = true;
            this.connected = true;

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏
            await this.sendTelegramMessage(`üè† –ö—ñ–º–Ω–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n\nüîë –ö–æ–¥: ${roomId}\nüëë –•–æ—Å—Ç: ${this.playerName}\n\nüì± –©–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ: /join ${roomId}`);

            this.emit('roomCreated', { roomId, roomData });
            this.emit('connected', { roomId });

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ polling –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å
            this.startPolling();

            return { success: true, roomId, roomData };
        } catch (error) {
            console.error('‚ùå Failed to create room:', error);
            return { success: false, error: error.message };
        }
    }

    generateRoomId() {
        return Math.random().toString(36).substr(2, 6).toUpperCase();
    }

    // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
    async joinRoom(roomId) {
        try {
            console.log('üö™ Joining room:', roomId);

            // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
            let roomData = this.loadRoomFromStorage(roomId);
            
            if (!roomData) {
                // –Ø–∫—â–æ –∫—ñ–º–Ω–∞—Ç–∏ –Ω–µ–º–∞—î –ª–æ–∫–∞–ª—å–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ Telegram
                await this.sendTelegramMessage(`üîç –®—É–∫–∞—é –∫—ñ–º–Ω–∞—Ç—É: ${roomId}`);
                
                // –ß–µ–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (—Å–∏–º—É–ª—è—Ü—ñ—è)
                await this.waitForRoomData(roomId);
                roomData = this.loadRoomFromStorage(roomId);
            }

            if (!roomData) {
                throw new Error(`–ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≥—Ä–∞–≤–µ—Ü—å –≤–∂–µ –≤ –∫—ñ–º–Ω–∞—Ç—ñ
            const existingPlayer = roomData.players.find(p => p.id === this.playerId);
            if (!existingPlayer) {
                roomData.players.push({
                    id: this.playerId,
                    name: this.playerName,
                    ready: false
                });
                roomData.lastActivity = Date.now();
                this.saveRoomToStorage(roomData);
            }

            this.currentRoom = roomData;
            this.isHost = roomData.hostId === this.playerId;
            this.connected = true;

            // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤
            await this.sendTelegramMessage(`üëã ${this.playerName} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}`);

            this.emit('roomJoined', { roomId, roomData });
            this.emit('connected', { roomId });

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
            this.startPolling();

            return { success: true, roomId, roomData };
        } catch (error) {
            console.error('‚ùå Failed to join room:', error);
            return { success: false, error: error.message };
        }
    }

    // –ü–æ–∫–∏–Ω—É—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É
    async leaveRoom() {
        try {
            if (!this.currentRoom) return;

            const roomId = this.currentRoom.id;
            
            // –í–∏–¥–∞–ª—è—î–º–æ –≥—Ä–∞–≤—Ü—è –∑ –∫—ñ–º–Ω–∞—Ç–∏
            this.currentRoom.players = this.currentRoom.players.filter(p => p.id !== this.playerId);
            this.currentRoom.lastActivity = Date.now();

            // –Ø–∫—â–æ –±—É–≤ —Ö–æ—Å—Ç–æ–º —ñ —î —ñ–Ω—à—ñ –≥—Ä–∞–≤—Ü—ñ, –ø–µ—Ä–µ–¥–∞—î–º–æ –ø—Ä–∞–≤–∞
            if (this.isHost && this.currentRoom.players.length > 0) {
                this.currentRoom.hostId = this.currentRoom.players[0].id;
                await this.sendTelegramMessage(`üëë ${this.currentRoom.players[0].name} —Ç–µ–ø–µ—Ä —Ö–æ—Å—Ç –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}`);
            }

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
            this.saveRoomToStorage(this.currentRoom);

            // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –≤–∏—Ö—ñ–¥
            await this.sendTelegramMessage(`üëã ${this.playerName} –ø–æ–∫–∏–Ω—É–≤ –∫—ñ–º–Ω–∞—Ç—É ${roomId}`);

            // –û—á–∏—â—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
            this.stopPolling();
            this.currentRoom = null;
            this.isHost = false;
            this.connected = false;

            this.emit('roomLeft', { roomId });

        } catch (error) {
            console.error('‚ùå Failed to leave room:', error);
        }
    }

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ–≥—Ä–æ–≤–æ—ó –¥—ñ—ó
    async sendGameAction(action, data = {}) {
        try {
            if (!this.currentRoom) {
                throw new Error('–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –∫—ñ–º–Ω–∞—Ç–∏');
            }

            const gameAction = {
                type: 'gameAction',
                action: action,
                data: data,
                playerId: this.playerId,
                playerName: this.playerName,
                timestamp: Date.now(),
                roomId: this.currentRoom.id
            };

            // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
            this.processGameAction(gameAction);

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–µ—Ä–µ–∑ Telegram
            const message = this.formatGameActionMessage(gameAction);
            await this.sendTelegramMessage(message);

            this.emit('gameAction', gameAction);

            return { success: true };
        } catch (error) {
            console.error('‚ùå Failed to send game action:', error);
            return { success: false, error: error.message };
        }
    }

    formatGameActionMessage(gameAction) {
        const { action, data, playerName } = gameAction;
        
        switch (action) {
            case 'playerReady':
                return `‚úÖ ${playerName} –≥–æ—Ç–æ–≤–∏–π –¥–æ –≥—Ä–∏`;
            case 'wordSubmitted':
                return `üìù ${playerName} –Ω–∞–¥—ñ—Å–ª–∞–≤ —Å–ª–æ–≤–æ: ${data.word}`;
            case 'gameStarted':
                return `üéÆ –ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—è! –ü–µ—Ä—à–∏–π —Ö–æ–¥–∏—Ç—å: ${data.currentPlayer}`;
            case 'roundFinished':
                return `üèÅ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –†–∞—Ö—É–Ω–æ–∫: ${Object.entries(data.scores).map(([p, s]) => `${p}: ${s}`).join(', ')}`;
            default:
                return `üéØ ${playerName}: ${action}`;
        }
    }

    processGameAction(gameAction) {
        if (!this.currentRoom) return;

        const { action, data, playerId } = gameAction;

        switch (action) {
            case 'playerReady':
                const player = this.currentRoom.players.find(p => p.id === playerId);
                if (player) {
                    player.ready = true;
                }
                break;

            case 'wordSubmitted':
                this.currentRoom.gameState.words.push({
                    word: data.word,
                    playerId: playerId,
                    timestamp: Date.now()
                });
                break;

            case 'gameStarted':
                this.currentRoom.gameState.status = 'playing';
                this.currentRoom.gameState.currentRound = 1;
                this.currentRoom.gameState.currentPlayer = data.currentPlayer;
                break;
        }

        this.currentRoom.lastActivity = Date.now();
        this.saveRoomToStorage(this.currentRoom);
    }

    // Telegram API –º–µ—Ç–æ–¥–∏
    async sendTelegramMessage(text) {
        if (!this.botToken || !this.chatId) {
            console.log('üìù [DEMO MODE]:', text);
            return;
        }

        try {
            const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: this.chatId,
                    text: text,
                    parse_mode: 'HTML'
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('‚ùå Failed to send Telegram message:', error);
        }
    }

    // Polling –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å
    startPolling() {
        if (this.pollingInterval) {
            clearInterval(this.pollingInterval);
        }

        this.pollingInterval = setInterval(() => {
            this.checkForUpdates();
        }, 2000); // –ö–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏
    }

    stopPolling() {
        if (this.pollingInterval) {
            clearInterval(this.pollingInterval);
            this.pollingInterval = null;
        }
    }

    async checkForUpdates() {
        try {
            if (!this.currentRoom) return;

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            const updatedRoom = this.loadRoomFromStorage(this.currentRoom.id);
            if (updatedRoom && updatedRoom.lastActivity > this.currentRoom.lastActivity) {
                this.currentRoom = updatedRoom;
                this.emit('roomUpdated', updatedRoom);
            }

            // –°–∏–º—É–ª—é—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å —á–µ—Ä–µ–∑ Telegram (–≤ —Ä–µ–∞–ª—å–Ω—ñ–π —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç—É—Ç –±—É–≤ –±–∏ getUpdates)
            this.simulateUpdates();

        } catch (error) {
            console.error('‚ùå Polling error:', error);
        }
    }

    simulateUpdates() {
        // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç—É—Ç –±—É–≤ –±–∏ –≤–∏–∫–ª–∏–∫ getUpdates API
        // –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –µ–º—ñ—Ç–∏–º–æ heartbeat
        this.emit('heartbeat', { timestamp: Date.now() });
    }

    // –õ–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è
    saveRoomToStorage(roomData) {
        try {
            const key = `room_${roomData.id}`;
            localStorage.setItem(key, JSON.stringify(roomData));
            
            // –¢–∞–∫–æ–∂ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—ñ–º–Ω–∞—Ç
            const activeRooms = this.getActiveRooms();
            if (!activeRooms.includes(roomData.id)) {
                activeRooms.push(roomData.id);
                localStorage.setItem('active_rooms', JSON.stringify(activeRooms));
            }
        } catch (error) {
            console.error('‚ùå Failed to save room to storage:', error);
        }
    }

    loadRoomFromStorage(roomId) {
        try {
            const key = `room_${roomId}`;
            const data = localStorage.getItem(key);
            return data ? JSON.parse(data) : null;
        } catch (error) {
            console.error('‚ùå Failed to load room from storage:', error);
            return null;
        }
    }

    getActiveRooms() {
        try {
            const data = localStorage.getItem('active_rooms');
            return data ? JSON.parse(data) : [];
        } catch (error) {
            return [];
        }
    }

    async waitForRoomData(roomId, timeout = 5000) {
        return new Promise((resolve) => {
            const startTime = Date.now();
            const checkInterval = setInterval(() => {
                const roomData = this.loadRoomFromStorage(roomId);
                if (roomData || Date.now() - startTime > timeout) {
                    clearInterval(checkInterval);
                    resolve(roomData);
                }
            }, 500);
        });
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    isConnected() {
        return this.connected;
    }

    getCurrentRoom() {
        return this.currentRoom;
    }

    getPlayerId() {
        return this.playerId;
    }

    getPlayerName() {
        return this.playerName;
    }

    // Cleanup
    destroy() {
        this.stopPolling();
        this.currentRoom = null;
        this.connected = false;
        this.eventHandlers.clear();
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç
if (typeof window !== 'undefined') {
    window.TelegramFreeMultiplayerManager = TelegramFreeMultiplayerManager;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = TelegramFreeMultiplayerManager;
}
